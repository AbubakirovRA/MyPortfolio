{
  "openapi": "3.0.0",
  "info": {
    "title": "Vacuum Cleaner Cloud Service",
    "description": "This is a sample Vacuum Cleaner Cloud Service server.\n",
    "termsOfService": "https://geekbrainspro.notion.site/1-10-92978118200543f2adcb5d33037b46f2",
    "contact": {
      "email": "vacuumcleaner@vacuumcleaner.net"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/geek_brans_student/VacuumCleaner/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    },
    {
      "url": "https://vacuumcleaner.swagger.io/v2"
    }
  ],
  "tags": [
    {
      "name": "vacuumcleaner",
      "description": "Everything about your vacuumcleaners",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to vacuumcleaner programmas"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/vacuumcleaner": {
      "put": {
        "tags": [
          "vacuumcleaner"
        ],
        "summary": "Update an existing vacuumcleaner",
        "operationId": "updatevacuumcleaner",
        "requestBody": {
          "$ref": "#/components/requestBodies/vacuumcleaner"
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacuumcleaner not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "vacuumcleaner_auth": [
              "write:vacuumcleaners",
              "read:vacuumcleaners"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "vacuumcleaner"
        ],
        "summary": "Add a new vacuumcleaner to the store",
        "operationId": "addvacuumcleaner",
        "requestBody": {
          "$ref": "#/components/requestBodies/vacuumcleaner"
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "vacuumcleaner_auth": [
              "write:vacuumcleaners",
              "read:vacuumcleaners"
            ]
          }
        ]
      }
    },
    "/vacuumcleaner/findByStatus": {
      "get": {
        "tags": [
          "vacuumcleaner"
        ],
        "summary": "Finds vacuumcleaners by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findvacuumcleanersByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/vacuumcleaner"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/vacuumcleaner"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "vacuumcleaner_auth": [
              "write:vacuumcleaners",
              "read:vacuumcleaners"
            ]
          }
        ]
      }
    },
    "/vacuumcleaner/findByTags": {
      "get": {
        "tags": [
          "vacuumcleaner"
        ],
        "summary": "Finds vacuumcleaners by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.",
        "operationId": "findvacuumcleanersByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/vacuumcleaner"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/vacuumcleaner"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "deprecated": true,
        "security": [
          {
            "vacuumcleaner_auth": [
              "write:vacuumcleaners",
              "read:vacuumcleaners"
            ]
          }
        ]
      }
    },
    "/vacuumcleaner/{vacuumcleanerId}": {
      "get": {
        "tags": [
          "vacuumcleaner"
        ],
        "summary": "Find vacuumcleaner by ID",
        "description": "Returns a single vacuumcleaner",
        "operationId": "getvacuumcleanerById",
        "parameters": [
          {
            "name": "vacuumcleanerId",
            "in": "path",
            "description": "ID of vacuumcleaner to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vacuumcleaner"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/vacuumcleaner"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacuumcleaner not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "vacuumcleaner"
        ],
        "summary": "Updates a vacuumcleaner in the store with form data",
        "operationId": "updatevacuumcleanerWithForm",
        "parameters": [
          {
            "name": "vacuumcleanerId",
            "in": "path",
            "description": "ID of vacuumcleaner that needs to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/vacuumcleaner_vacuumcleanerId_body"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "vacuumcleaner_auth": [
              "write:vacuumcleaners",
              "read:vacuumcleaners"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "vacuumcleaner"
        ],
        "summary": "Deletes a vacuumcleaner",
        "operationId": "deletevacuumcleaner",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vacuumcleanerId",
            "in": "path",
            "description": "vacuumcleaner id to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacuumcleaner not found"
          }
        },
        "security": [
          {
            "vacuumcleaner_auth": [
              "write:vacuumcleaners",
              "read:vacuumcleaners"
            ]
          }
        ]
      }
    },
    "/vacuumcleaner/{vacuumcleanerId}/uploadImage": {
      "post": {
        "tags": [
          "vacuumcleaner"
        ],
        "summary": "uploads an image",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "vacuumcleanerId",
            "in": "path",
            "description": "ID of vacuumcleaner to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "vacuumcleaner_auth": [
              "write:vacuumcleaners",
              "read:vacuumcleaners"
            ]
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns vacuumcleaner inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/programma": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an programma for a vacuumcleaner",
        "operationId": "placeprogramma",
        "requestBody": {
          "description": "programma placed for purchasing the vacuumcleaner",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/programma"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/programma"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/programma"
                }
              }
            }
          },
          "400": {
            "description": "Invalid programma"
          }
        }
      }
    },
    "/store/programma/{programmaId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase programma by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10.\\ \\ Other values will generated exceptions",
        "operationId": "getprogrammaById",
        "parameters": [
          {
            "name": "programmaId",
            "in": "path",
            "description": "ID of vacuumcleaner that needs to be fetched",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/programma"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/programma"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "programma not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase programma by ID",
        "description": "For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors",
        "operationId": "deleteprogramma",
        "parameters": [
          {
            "name": "programmaId",
            "in": "path",
            "description": "ID of the programma that needs to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "programma not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "programma": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "vacuumcleanerId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "programma Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "programma"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "vacuumcleaner": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "IRobot"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "vacuumcleaner status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "vacuumcleaner"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "vacuumcleaner_vacuumcleanerId_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the vacuumcleaner"
          },
          "status": {
            "type": "string",
            "description": "Updated status of the vacuumcleaner"
          }
        }
      }
    },
    "requestBodies": {
      "vacuumcleaner": {
        "description": "vacuumcleaner object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/vacuumcleaner"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/vacuumcleaner"
            }
          }
        },
        "required": true
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "vacuumcleaner_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://vacuumcleaner.swagger.io/oauth/dialog",
            "scopes": {
              "write:vacuumcleaners": "modify vacuumcleaners in your account",
              "read:vacuumcleaners": "read your vacuumcleaners"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}