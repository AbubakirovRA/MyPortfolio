import java.util.Base64;

public class taskYandex {
    public static void main(String[] args) {
        // String encodedString = "WWFuZGV4LkZpbnRIY2guQW5kcm9pZA==";
        // byte[] decodedBytes = Base64.getDecoder().decode(encodedString);
        // String decodedString = new String(decodedBytes);
        // System.out.println(decodedString);

        String message = "Yandex.Fintech.Android";
        String encodedMessage = Base64.getEncoder().encodeToString(message.getBytes());
        System.out.println(encodedMessage);
    }
}

// что из себя представляет Base64?

/* Base64 - это способ кодирования данных, который преобразует бинарные данные в текстовый формат. 
Он используется для передачи данных через сеть, таких как изображения, звуковые файлы или другие бинарные файлы, 
в формате, который может быть прочитан и обработан компьютером или человеком.

Base64 использует 64 символа (от A до Z, a до z, 0 до 9, + и /), чтобы представить бинарные данные в текстовой форме. 
Каждые три байта исходных данных преобразуются в четыре символа Base64. 
Если исходные данные не делятся на три, они могут быть дополнены нулями и в конце добавляется символ заполнения "=", 
который указывает на количество добавленных нулей.

Rак понять с первого взгляда, как эту строку декодировать? Чем руководствоваться, какой логикой?

Строка, представляет собой закодированную строку в формате Base64. 
Возможно, в контексте, в котором получили эту строку, есть информация о том, что она должна быть закодирована в 
Base64.

Также можно обратить внимание на суффикс == в конце строки, который является типичным признаком того, 
что строка закодирована в Base64. 
Если вы уверены, что строка закодирована в Base64, 
то вы можете использовать любой онлайн-декодер Base64, чтобы раскодировать ее.



Чтобы закодировать строку "Yandrex.Fintech.Android" в Base64 нужно выполнить следующие шаги:

1. Преобразовать каждый символ строки в его ASCII-код. 
Например, символ "A" имеет ASCII-код 65, символ "n" - 110 и т.д.

2. Представить ASCII-коды символов в двоичном виде. 
Для этого нужно использовать 8-битовые числа (байты).

3. Сгруппировать байты по 3 символа и преобразовать каждую группу в число. 
Если символов в последней группе меньше 3, то добавить нули в конце, чтобы получить полную группу.

4.Представить каждое число в виде 4-байтового числа в системе Base64. 
Можно представить в виде следующей таблицы:
Значение (двоичное)	Значение (Base64)
000000 - 001111	        A - Z
010000 - 101111	        a - z
110000 - 110111	        0 - 9
111000	                +
111001	                /

5. Объединить полученные символы Base64 в одну строку.

Применяя этот алгоритм к строке "Yandrex.Fintech.Android", получим следующую закодированную строку в Base64:
"QW5kcmV4LkZpbnRIY2cuQW5kcm9pZA==".



Для того, чтобы закодировать фразу "Yandrex.Fintech.Android" в Base64, нужно выполнить следующие шаги:

Преобразуйте каждый символ фразы в его ASCII-код. Вот соответствующие коды:
89 97 110 100 114 101 120 46 70 105 110 116 101 99 104 46 65 110 100 114 111 105 100

Преобразуйте каждый ASCII-код в двоичное представление. Вот соответствующие двоичные числа:
01011001 01100001 01101110 01100100 01110010 01100101 01111000 00101110 01000110 01101001 01101110 01110100
01100101 01100011 01101000 00101110 01000001 01101110 01100100 01110010 01101111 01101001 01100100

Соедините все двоичные числа в одну строку:
010110010110000101101110011001000111001001110010001011100011010001100101011011110111100001011000010011010010000101100001011010110110111101110011001000

Разделите строку на блоки по 6 бит каждый. В данном случае последний блок будет содержать только 2 бита. 
Добавьте нули справа для дополнения последнего блока до 6 бит. Вот соответствующие блоки:
010110 010110 000101 101110 011001 000111 001001 110010 001011 100011 010001 100101 011011 110111 100001 011000 010011 010010 000101 100001 011010 110110 111101 110011 001000 00

Преобразуйте каждый блок в десятичное число. Вот соответствующие десятичные числа:
26 22 5 46 25 7 9 50 11 35 17 37 27 59 33 24 19 18 5 33 26 54 61 51 8

Преобразуйте каждое десятичное число в символ, используя таблицу Base64. Вот соответствующие символы:
Z W F u Z G 9 j a X R l Y 3 o I k M 1 H h I J 5 B M W 1 2 T 3 M Q 4

Соедините все символы в одну строку. 
Полученная строка и будет закодированной версией фразы "Yandrex.Fintech.Android" в Base64:
"WFZ1WjlqYVhSZGV4U2hjLkFuZHJvaWQ="

а для чего такие сложности, почему просто сразу не передать фразу как она есть?
Base64 используется для передачи бинарных данных, которые могут содержать символы, 
недопустимые в определенных контекстах (например, символы ASCII кода больше 127), в текстовой форме. 
Это может понадобиться в различных ситуациях, например, для передачи изображений или звуковых файлов 
в электронной почте или через протокол HTTP, где необходимо передавать данные в виде текста. 
В таких случаях просто передать фразу "как есть" не получится, поэтому используется кодирование в Base64.


если символы недопустимы в определенных контекстах, то зачем их передавать?
Существуют несколько причин, по которым некоторые символы могут быть недопустимы в определенных контекстах:

Ограничения протоколов передачи данных. Некоторые протоколы могут иметь ограничения на использование 
определенных символов в передаваемых данных. Например, некоторые протоколы могут требовать, 
чтобы данные были переданы в виде строки ASCII, без использования символов Unicode.

Ограничения операционных систем и файловых систем. Некоторые операционные системы и файловые системы могут иметь
 ограничения на использование определенных символов в именах файлов и папок. 
 Например, в Windows недопустимы символы *, /, , :, ?, ", <, >, |.

Ограничения языков программирования и сред разработки. 
Некоторые языки программирования и среды разработки могут иметь ограничения на использование определенных символов в
именах переменных, функций и т.д. Например, в языке Python недопустимо начинать имя переменной с цифры.

В таких случаях символы, которые недопустимы в определенном контексте, 
могут быть заменены на другие символы или закодированы в другой формат, чтобы обойти эти ограничения. 
Например, в URL-адресах символы, которые недопустимы в адресе, могут быть закодированы с помощью URL-кодирования.



почему тогда не передать строку в виде цифр, не понятно будет где заканчиваются биты?
Передача строки в виде цифр, то есть ее ASCII-кода, также возможна и иногда используется. 
Однако использование Base64 кодирования имеет несколько преимуществ.

Во-первых, Base64 кодирование позволяет передавать данные в виде строки, 
что удобно при использовании протоколов передачи данных, которые работают с текстовыми строками (например, HTTP).

Во-вторых, при передаче данных в бинарном виде (без использования кодирования), 
могут возникать проблемы с интерпретацией символов, которые могут трактоваться как управляющие символы или символы 
окончания строки. Base64 кодирование позволяет избежать этих проблем и гарантировать, что переданные данные будут 
правильно интерпретированы при их декодировании.

Наконец, Base64 кодирование также позволяет уменьшить объем передаваемых данных, поскольку один символ Base64 кодирует 
6 бит информации, тогда как один символ ASCII кодирует только 7 бит информации.
*/